# MIT License

# Copyright (c) 2021 Neil Enns, Stefan Herold

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This workflow generates documentation (PDFs, interactive BOMs, board images). The
# The version number and date of the design is automatically updated in the schematic
# file and on the PCB. The version number is set via an environment variable
# and by default is `pre-release` since this runs outside of the release process
# so there's no formal release number to use.

# To use this workflow in your own repo you need to edit the environment variables in the env: section
# below.


name: "Preflight"

on:
  push:
  pull_request:
    paths:
      - ".*.kicad_sch"
      - ".*.kicad_pcb"
      - ".kibot/*.kibot.yaml"
      - ".github/workflows/*.yml"

env:
  OutputFolder: KiBotOutput
  Project: ${{ github.event.repository.name }}

jobs:
  Kibot:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      # Get the commit hash.
      - name: Get GitHub commit hash
        id: vars
        run: echo "::set-output name=commit::$(git rev-parse --short HEAD)"

            # Get the commit hash.
      - name: Get GitHub commit hash
        id: get_version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"
      # Get the current date and time, in the timezone specified above, for use later.
      - name: Get current date and time
        id: get_date
        run: echo "::set-output name=date::$(TZ='${{ env.Timezone }}' date +'%Y-%m-%d %T')"

      # do string replacement in schematic files
      - name: Set schematic version
        uses: jacobtomlinson/gha-find-replace@v1
        with:
          include: ".*.kicad_sch"
          find: "%%version%%"
          replace: ${{ steps.get_version.outputs.version }}
      
      - name: Set schematic date
        uses: jacobtomlinson/gha-find-replace@v1
        with:
          include: ".*.kicad_sch"
          find: "%%date%%"
          replace: '"${{ steps.get_date.outputs.date }}"'

      # do string replacement in design files
      - name: Set PCB version
        uses: jacobtomlinson/gha-find-replace@v1
        with:
          include: ".*.kicad_pcb"
          find: "%%version%%"
          replace: ${{ steps.get_version.outputs.version }}
      
      - name: Set PCB date in page settings
        uses: jacobtomlinson/gha-find-replace@v1
        with:
          include: ".*.kicad_pcb"
          find: "date %%date%%"
          replace: 'date "${{ steps.get_date.outputs.date }}"'
      
      - name: Set PCB date on PCB layers
        uses: jacobtomlinson/gha-find-replace@v1
        with:
          include: ".*.kicad_pcb"
          find: "%%date%%"
          replace: ${{ steps.get_date.outputs.date }}

      # Actually run KiBot to generate all the files.
      - name: Generate documentation files
        uses: INTI-CMNB/KiBot@master
        if: ${{ success() }}
        with:
          config: .kibot/documentation.kibot.yaml
          dir: ${{ env.OutputFolder }}
          schema: ${{ env.Project }}.kicad_sch
          board: ${{ env.Project }}.kicad_pcb

      # Archive all the artifacts from output and attach to the action's results.
      - name: Archive logfile artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.Project }}-${{ steps.vars.outputs.commit }}-preflight
          path: ${{ env.OutputFolder }}/**.txt
